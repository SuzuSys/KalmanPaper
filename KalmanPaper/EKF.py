"""拡張カルマンフィルタ"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/EKF/00_EKF.ipynb.

# %% auto 0
__all__ = ['dxlosi', 'Ptt', 'wtt', 'EKF']

# %% ../nbs/EKF/00_EKF.ipynb 13
import jax.numpy as jnp
import jax.lax as lax
import jax
from jaxtyping import Array, Float, Int
from . import simple as sp
from typing import Tuple
from functools import partial

# %% ../nbs/EKF/00_EKF.ipynb 15
def dxlosi(
    x: Float[Array, ""] # $x$
) -> Float[Array, ""]: # $(d/dx)\sigma(x)$
  return sp.losi(x) * (1 - sp.losi(x))

# %% ../nbs/EKF/00_EKF.ipynb 17
@jax.jit
def Ptt(
    Ptm: Float[Array, "N N"], # $\mathbf P_{t/t-1}$
    w: Float[Array, "N"],   # $\hat{\mathbf w}_{t/t-1}$
    x: Float[Array, "N"],   # $\mathbf x_t$
) -> Float[Array, "N N"]:   # $\mathbf P_{t/t}$
  dsigma = dxlosi(w @ x)
  Ptmx = Ptm @ x
  return Ptm - (dsigma / (1 + dsigma * (x @ Ptmx))) * jnp.outer(Ptmx, Ptmx)

# %% ../nbs/EKF/00_EKF.ipynb 19
@jax.jit
def wtt(
    Ptm: Float[Array, "N N"], # $\mathbf P_{t/t-1}$
    w: Float[Array, "N"],   # $\hat{\mathbf w}_{t/t-1}$
    x: Float[Array, "N"],   # $\mathbf x_t$
    y: Float[Array, "N"],   # $y_t$
) -> Float[Array, "N"]: # $\hat{\mathbf w}_{t/t}$
  dsigma = dxlosi(w @ x)
  Ptmx = Ptm @ x
  return w + ((y - sp.losi(w @ x)) / (1 + dsigma * (x @ Ptmx))) * Ptmx

# %% ../nbs/EKF/00_EKF.ipynb 21
@partial(jax.jit, static_argnames=['N', 'T'])
def EKF(
    N: int, # $N$
    T: int, # $T$
    x: Float[Array, "{T} {N}"], # $\{ \mathbf x_t \}_{t=0,\ldots,T-1}$
    y: Float[Array, "{T} {N}"], # $\{ y_t \}_{t=0,\ldots,T-1}$
    G: Float[Array, "{N} {N}"], # $\boldsymbol\Gamma$
    w0: Float[Array, "{N}"], # $\hat{\mathbf w}_{0/-1}$
    P0: Float[Array, "{N} {N}"], # $\mathbf P_{0/-1}$
) -> Tuple[Float[Array, "{T} {N}"], Float[Array, "{T} {N} {N}"]]: # $\{\hat{\mathbf w}_{t/t}\}_{t=0,\ldots,T-1},\{\mathbf P_{t/t}\}_{t=0,\ldots,T-1}$
    def step(carry, inputs):
        Ptm, wtm = carry
        xt, yt = inputs
        Ptt_ = Ptt(Ptm, wtm, xt)
        wtt_ = wtt(Ptm, wtm, xt, yt)
        return (Ptt_ + G, wtt_), (wtt_, Ptt_)
    
    _, (W, P) = lax.scan(
        step,
        (P0, w0),
        (x, y),
        length=T
    )
    return W, P
