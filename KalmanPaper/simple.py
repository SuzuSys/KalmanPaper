"""simple functions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_funcs.ipynb.

# %% auto 0
__all__ = ['reshow_doc', 'rewrite_nt', 'losi', 'dxlosi']

# %% ../nbs/01_funcs.ipynb 3
import jax.numpy as jnp
import jax
from jaxtyping import Array, Float
from nbdev.showdoc import show_doc
from IPython.display import Markdown
import re
from typing import NamedTuple, Type

# %% ../nbs/01_funcs.ipynb 4
def fill_empty_md_table_cells(md: str, filler: str = r"$\!$") -> str:
    """
    Markdown のテーブル文字列（複数行含む）中で、
    セルが空（`|   |` や `| |` など）になっている部分を見つけ、
    filler（デフォルト "$\\!$"）を挿入する。

    注意：'|' の前後のスペースの扱いなどで誤検知する可能性があるので、
    実際の入力パターンに応じて調整してください。
    """
    lines = md.splitlines()
    out_lines = []
    # 正規表現：セル区切りのパイプ | … | で、セル中が空白または空
    # 例：|   | Column2 |
    # 改良：セル間の空白を許す
    cell_pattern = re.compile(r"(?<=\|)\s*(?=\|)")
    for ln in lines:
        # 各行で空セルパターンを filler に置き換え
        # `|   |` にマッチする部分を `| filler |` に置換
        newln = cell_pattern.sub(filler, ln)
        out_lines.append(newln)
    return "\n".join(out_lines)

# %% ../nbs/01_funcs.ipynb 5
def reshow_doc(
    sym: object # 定義した関数等
  ):
  r"""$\!$*
  VSCode で Quarto 拡張機能 (nbdev 拡張機能の Extention pack) を有効にすると
  空セルを含むテーブルが表示されないというバグを解決する(空セルを `$\!$` で埋める)。
  
  `show_doc` の代わりに使用すること。
  *$\!$"""
  fixed = fill_empty_md_table_cells(show_doc(sym).__str__())
  return Markdown(fixed)

# %% ../nbs/01_funcs.ipynb 7
def rewrite_nt(
    nt: Type[NamedTuple] # NamedTuple を継承したクラス
):
  r"""$\!$*
  `NamedTuple` のメンバがテーブルで表示されるように `__doc__` を書き換える。
  
  定義した `NamedTuple` と同じセルで実行すること。

  コメントは下記のように、`table` と記載した後下に引数とコメントを列挙し、上下を空行で挟むこと。

  ```

  table
  {arg1}: {comment1}
  {arg2}: {comment2}

  ```
  *$\!$"""
  annos = nt.__annotations__
  src = nt.__doc__
  if not src:
    return
  if len(nt._field_defaults) > 0:
    src = re.sub(r"table\n", "| $\\!$ | Type | Default | Details |\n|--|--|--|--|\n", src)
    for arg, anno in annos.items():
      if arg in nt._field_defaults:
        src = re.sub(rf"{arg}:\s", f"| {arg} | {anno.__name__} | {nt._field_defaults[arg]} | ", src)
      else:
        src = re.sub(rf"{arg}:\s", f"| {arg} | {anno.__name__} | $\\!$ | ", src)
  else:
    src = re.sub(r"table\n", "| $\\!$ | Type | Details |\n|--|--|--|\n", src)
    for arg, anno in annos.items():
      src = re.sub(rf"{arg}:\s", f"| {arg} | {anno.__name__} | ", src)
  nt.__doc__ = src


# %% ../nbs/01_funcs.ipynb 9
def losi(
    x: Float[Array, ""] # $x$
) -> Float[Array, ""]: # $\sigma(x)=1/(1+ e\\^{-x})$
  r"""$\!$*
  Logistic sigmoid 関数
  $$\sigma(x)=\frac{1}{1+e^{-x}}$$
  *$\!$"""
  return 1/(1+jnp.exp(-x))

# %% ../nbs/01_funcs.ipynb 11
def dxlosi(
    x: Float[Array, ""] # $x$
) -> Float[Array, ""]: # $(d/dx)\sigma(x)$
  r"""$\!$*
  Logistic sigmoid 関数の導関数
  $$\frac{d}{dx}\sigma(x)=\sigma(x)\{1-\sigma(x)\}$$
  *$\!$"""
  return losi(x) * (1 - losi(x))
